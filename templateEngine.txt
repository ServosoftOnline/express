EN DESUSO

- TEMPLATE ENGINE:

    - Tecnolog√≠a que se a√±ade al backend que permite crear m√∫ltiples paginas que comparten interfaces o datos
    - En espa√±ol se podr√≠a traducir como "Un motor de plantillas"  
    - Permite procesar archivos html en el backend y enviarlos al frontend. 

    - Debo usarlo en caso de no usar react aplicando template engine de esta forma:
        - Envio desde el frontend informaci√≥n mediante request body, request params o request query
        - Recibe esto datos el servidor.
        - Hace su consulta en la bbdd
        - Obtiene datos que los envia mediante template engine y crea la pagina web de respuesta

    - Las p√°ginas se suelen almacenar estas en una carpeta llamada views
        - Tienen la extension .ejs y la estructura basica de un html            

    - Configuraci√≥n en settings.
        - Es necesario realizar una configuracion en settings del archivo server.js

        - Es necesario indicar en settings la carpeta y la ubicaci√≥n de las carpeta que contiene las views
            - app.set('views'. path.join(__dirname, 'views'))
            
        - Debo indicar el motor de plantillas utilizado:
            - En este caso usarems ejs y lo indico as√≠: app.set('view engine', 'ejs')

- EJS
    - Uno de los modulos que permite implementar template engine que usare en esta app
    - Su documentaci√≥n se encuentra en este enlace: https://ejs.co/
    - Se puede descargar desde: https://www.npmjs.com/package/ejs

    - Permite leer datos, combinarlos con el html y despues enviarlos al frontend
        - Usando para ello una sintaxis para interpretar datos o ejecutar logica de javascript
            - Son etiquetas con caracteres extra√±os
                - <%= vble %>
            - Usar condicionales
            - Unir distintas porciones de html en una sola

        - Y usando el m√©todo render, puedo renderizar las paginas

    - Puedo obtener datos de una bbdd, renderizar una pagina y enviar dichos datos
        -Ej: res.render(pagina de la carpeta views, {Objeto con los datos})

    - Lo instalo mediante: npm i ejs
    - Lo importo mediante la linea: require('ejs') o import si uso ECS6

- SI USO REACT, NO DEBO USAR TEMPLATE ENINGE:

    - En lugar de que Express renderice HTML con EJS, lo que har√°s es:

        1Ô∏è‚É£ React se encarga de la interfaz de usuario y se ejecuta en el navegador.
        2Ô∏è‚É£ Express act√∫a como un servidor API y solo env√≠a JSON, no HTML.
        3Ô∏è‚É£ MongoDB almacena los datos y Express los consulta cuando React los necesita.

    - El flujo t√≠pico ser√≠a algo as√≠:

        1Ô∏è‚É£ React hace una petici√≥n HTTP (fetch, axios, etc.) a Express.
        2Ô∏è‚É£ Express recibe la petici√≥n, consulta MongoDB y devuelve los datos en formato JSON.
        3Ô∏è‚É£ React recibe los datos y los muestra en la UI.



VOY POR EL VIDEO EN LA HORA 3 Y 16 MINUTOS. EL MOTOR DE PLANTILLAS EST√Å ANTICUADO SI YA USO REACT.
QUIZAS NO CONTINUE APRENDIENDO DE ESTE VIDEO DEBIDO A SU FALTA DE USO.

RECOMENDACION CHATGPT:
Si tu meta con Express es construir APIs para consumir desde React, entonces olv√≠date de EJS y conc√©ntrate en middleware, rutas, controladores, autenticaci√≥n y bases de datos.    
üëâ Mi consejo: cambia de video y busca uno m√°s enfocado en Express como backend para una aplicaci√≥n React. Te evitar√°s aprender cosas innecesarias.

    